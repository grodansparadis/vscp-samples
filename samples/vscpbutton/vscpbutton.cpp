/////////////////////////////////////////////////////////////////////////////
// Name:        vscpbutton.cpp
// Purpose:     
// Author:      Ake Hedman
// Modified by: 
// Created:     Sat 15 Dec 2007 16:00:05 CET
// RCS-ID:      
// Copyright:   Copyright (C) 2007 eurosource 
// Licence:     
/////////////////////////////////////////////////////////////////////////////

// For compilers that support precompilation, includes "wx/wx.h".
#include "wx/wxprec.h"

#ifdef __BORLANDC__
#pragma hdrstop
#endif

#ifndef WX_PRECOMP
#include "wx/wx.h"
#endif

////@begin includes
////@end includes

#include "vscpbutton.h"

////@begin XPM images
/* XPM */
static char *copy_xpm[] = {
/* columns rows colors chars-per-pixel */
"16 15 4 1",
"  c None",
". c Black",
"X c Gray100",
"o c #000080",
/* pixels */
"                ",
" ......         ",
" .XXXX..        ",
" .XXXX.X.       ",
" .X..X.oooooo   ",
" .XXXXXoXXXXoo  ",
" .X....oXXXXoXo ",
" .XXXXXoX..Xoooo",
" .X....oXXXXXXXo",
" .XXXXXoX.....Xo",
" ......oXXXXXXXo",
"       oX.....Xo",
"       oXXXXXXXo",
"       ooooooooo",
"                "
};

/* XPM */
static char *cut_xpm[] = {
/* columns rows colors chars-per-pixel */
"16 15 3 1",
"  c None",
". c Black",
"X c #000080",
/* pixels */
"                ",
"     .   .      ",
"     .   .      ",
"     .   .      ",
"     .. ..      ",
"      . .       ",
"      ...       ",
"       .        ",
"      X.X       ",
"      X XXX     ",
"    XXX X  X    ",
"   X  X X  X    ",
"   X  X X  X    ",
"   X  X  XX     ",
"    XX          "
};

////@end XPM images


/*!
 * VSCPButton type definition
 */

IMPLEMENT_DYNAMIC_CLASS( VSCPButton, wxDialog )


/*!
 * VSCPButton event table definition
 */

BEGIN_EVENT_TABLE( VSCPButton, wxDialog )

////@begin VSCPButton event table entries
////@end VSCPButton event table entries

END_EVENT_TABLE()


/*!
 * VSCPButton constructors
 */

VSCPButton::VSCPButton()
{
    Init();
}

VSCPButton::VSCPButton( wxWindow* parent, wxWindowID id, const wxString& caption, const wxPoint& pos, const wxSize& size, long style )
{
    Init();
    Create(parent, id, caption, pos, size, style);
}


/*!
 * VSCPButton creator
 */

bool VSCPButton::Create( wxWindow* parent, wxWindowID id, const wxString& caption, const wxPoint& pos, const wxSize& size, long style )
{
////@begin VSCPButton creation
    SetExtraStyle(wxWS_EX_BLOCK_EVENTS);
    wxDialog::Create( parent, id, caption, pos, size, style );

    CreateControls();
    if (GetSizer())
    {
        GetSizer()->SetSizeHints(this);
    }
    Centre();
////@end VSCPButton creation
    return true;
}


/*!
 * VSCPButton destructor
 */

VSCPButton::~VSCPButton()
{
////@begin VSCPButton destruction
////@end VSCPButton destruction
}


/*!
 * Member initialisation
 */

void VSCPButton::Init()
{
////@begin VSCPButton member initialisation
////@end VSCPButton member initialisation
}


/*!
 * Control creation for VSCPButton
 */

void VSCPButton::CreateControls()
{    
////@begin VSCPButton content construction
    // Generated by DialogBlocks, 25/01/2009 15:19:20 (unregistered)

    VSCPButton* itemDialog1 = this;

    wxBoxSizer* itemBoxSizer2 = new wxBoxSizer(wxVERTICAL);
    itemDialog1->SetSizer(itemBoxSizer2);

    wxToolBar* itemToolBar3 = new wxToolBar;
    itemToolBar3->Create( itemDialog1, ID_TOOLBAR, wxDefaultPosition, wxDefaultSize, wxTB_FLAT|wxTB_HORIZONTAL );
    wxBitmap itemtool4Bitmap(itemDialog1->GetBitmapResource(wxT("../../../../../../Program/DialogBlocks/Samples/Acme/copy.xpm")));
    wxBitmap itemtool4BitmapDisabled(itemDialog1->GetBitmapResource(wxT("../../../../../../Program/DialogBlocks/Samples/Acme/copy.xpm")));
    itemToolBar3->AddTool(ID_TOOL, _T(""), itemtool4Bitmap, itemtool4BitmapDisabled, wxITEM_NORMAL, _T(""), wxEmptyString);
    itemToolBar3->Realize();
    itemBoxSizer2->Add(itemToolBar3, 0, wxALIGN_LEFT|wxALL, 5);

    wxBitmapButton* itemBitmapButton5 = new wxBitmapButton;
    itemBitmapButton5->Create( itemDialog1, ID_TOGGLEBUTTON1, itemDialog1->GetBitmapResource(wxT("../../../../../../Program/DialogBlocks/Samples/Acme/cut.xpm")), wxDefaultPosition, wxSize(200, 100), wxBU_AUTODRAW );
    itemBitmapButton5->SetDefault();
    itemBoxSizer2->Add(itemBitmapButton5, 0, wxALIGN_CENTER_HORIZONTAL|wxALL, 5);

////@end VSCPButton content construction
}


/*!
 * Should we show tooltips?
 */

bool VSCPButton::ShowToolTips()
{
    return true;
}

/*!
 * Get bitmap resources
 */

wxBitmap VSCPButton::GetBitmapResource( const wxString& name )
{
    // Bitmap retrieval
////@begin VSCPButton bitmap retrieval
    wxUnusedVar(name);
    if (name == _T("../../../../../../Program/DialogBlocks/Samples/Acme/copy.xpm"))
    {
        wxBitmap bitmap(copy_xpm);
        return bitmap;
    }
    else if (name == _T("../../../../../../Program/DialogBlocks/Samples/Acme/cut.xpm"))
    {
        wxBitmap bitmap(cut_xpm);
        return bitmap;
    }
    return wxNullBitmap;
////@end VSCPButton bitmap retrieval
}

/*!
 * Get icon resources
 */

wxIcon VSCPButton::GetIconResource( const wxString& name )
{
    // Icon retrieval
////@begin VSCPButton icon retrieval
    wxUnusedVar(name);
    return wxNullIcon;
////@end VSCPButton icon retrieval
}
